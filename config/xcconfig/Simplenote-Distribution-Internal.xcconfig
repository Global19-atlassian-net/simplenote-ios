//
// Simplenote-Distribution-Internal.xcconfig
//
// Generated by BuildSettingExtractor on 4/11/20
// https://github.com/dempseyatgithub/BuildSettingExtractor
//

#include "Simplenote-Shared.xcconfig"

// Asset Catalog App Icon Set Name
//
// Name of an asset catalog app icon set whose contents will be merged into the
// `Info.plist`.

ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon-Beta

// Code Signing Entitlements
//
// The path to a file specifying code-signing entitlements.

CODE_SIGN_ENTITLEMENTS = Simplenote/Simplenote-Internal.entitlements

// Code Signing Identity
//
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY = iPhone Distribution: Automattic, Inc.

// Code Signing Identity
//
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Distribution: Automattic, Inc.

// Development Team
//
// The team ID of a development team to use for signing certificates and provisioning
// profiles.

DEVELOPMENT_TEAM = 99KV9Z6BKV

// Preprocessor Macros
//
// Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.

GCC_PREPROCESSOR_DEFINITIONS = INTERNAL_DISTRIBUTION=1 USE_APPCENTER=1 USE_VERBOSE_LOGGING=1 $(inherited)

// Product Bundle Identifier
//
// A string that uniquely identifies the bundle. The string should be in reverse DNS
// format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and
// the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist`
// of the built bundle.

PRODUCT_BUNDLE_IDENTIFIER = com.codality.NotationalFlow.Internal

// Provisioning Profile
//
// Must contain a profile name (or UUID). A missing or invalid profile will cause a build
// error. Use in conjunction with [DEVELOPMENT_TEAM] to fully specify provisioning
// profile.

PROVISIONING_PROFILE_SPECIFIER = match InHouse com.codality.NotationalFlow.Internal

// Active Compilation Conditions
//
// A list of compilation conditions to enable for conditional compilation expressions.

SWIFT_ACTIVE_COMPILATION_CONDITIONS = BUILD_INTERNAL $(SP_IOS_SDK)
